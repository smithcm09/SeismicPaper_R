load("~/Desktop/SeismicPaper_R/ForRMatched.RData")
View(ForRMatchedData_04032018)
#Data Exploration
attach(ForRMatchedData_04032018)
Var2explore = VASR_AB # <- change this to run with other response variables
#run summary of the data
summary(Var2explore)
#plot the variable along index values
plot(Var2explore)
hist(Var2explore)
hist(Var2explore, breaks=50)
rug()
rug(Var2explore)
density(Var2explore)
#check normality with qqPlot
qqplot(Var2explore)
#plot the variable along index values
plot(Var2explore, id.n=3)
identify(Var2explore)
#look for possible transformations
symbox(Var2explore)
library("car", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library("carData", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library("effects", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
qqPlot(Var2explore)
#look for possible transformations
symbox(Var2explore)
powerTransform(Var2explore)
spreadLevelPlot(Var2explore)
#if min is 0 or negative add a start value
Var2explore <- Var2explore+0.01
#plot the variable along index values
plot(Var2explore)
identify(Var2explore)
hist(Var2explore, breaks=50)
rug(Var2explore)
density(Var2explore)
qqPlot(Var2explore)
#look for possible transformations
symbox(Var2explore)
powerTransform(Var2explore)
spreadLevelPlot(Var2explore)
hist(Var2explore, breaks=50)
rug(Var2explore)
density(Var2explore)
#redo with suggested transform
trans_Var2explore <- log(Var2explore)
plot(trans_Var2explore)
hist(trans_Var2explore)
hist(trans_Var2explore, breaks=50)
density(trans_Var2explore)
rug(trans_Var2explore)
qqPlot(trans_Var2explore)
identify()
identify(trans_Var2explore)
Var2explore = MaxVASR # <- change this to run with other response variables
#run summary of the data
summary(Var2explore)
#if min is 0 or negative add a start value
Var2explore <- Var2explore+0.01 # <-- if needed change this line or comment out
#plot the variable along index values
plot(Var2explore)
identify(Var2explore)
hist(Var2explore, breaks=50)
rug(Var2explore)
qqPlot(Var2explore)
#look for possible transformations
symbox(Var2explore)
powerTransform(Var2explore)
#redo with suggested transform
trans_Var2explore <- log(Var2explore) # <-- change this line to match suggested transform
plot(trans_Var2explore)
identify(trans_Var2explore)
hist(trans_Var2explore, breaks=50)
rug(trans_Var2explore)
qqPlot(trans_Var2explore)
Var2explore = OverallABmedInfra # <- change this to run with other response variables
#run summary of the data
summary(Var2explore)
#if min is 0 or negative add a start value
Var2explore <- Var2explore+0.01 # <-- if needed change this line or comment out
#plot the variable along index values
plot(Var2explore)
identify(Var2explore)
hist(Var2explore, breaks=50)
rug(Var2explore)
qqPlot(Var2explore)
#look for possible transformations
symbox(Var2explore)
powerTransform(Var2explore)
#redo with suggested transform
trans_Var2explore <- log(Var2explore) # <-- change this line to match suggested transform
plot(trans_Var2explore)
identify(trans_Var2explore)
Var2explore = VASR_AB # <- change this to run with other response variables
#run summary of the data
summary(Var2explore)
#if min is 0 or negative add a start value
Var2explore <- Var2explore+0.01 # <-- if needed change this line or comment out
#plot the variable along index values
plot(Var2explore)
identify(Var2explore)
hist(Var2explore, breaks=50)
rug(Var2explore)
qqPlot(Var2explore)
#look for possible transformations
symbox(Var2explore)
powerTransform(Var2explore)
#redo with suggested transform
trans_Var2explore <- log(Var2explore) # <-- change this line to match suggested transform
plot(trans_Var2explore)
identify(trans_Var2explore)
Var2explore = OverallABmedSeis # <- change this to run with other response variables
#run summary of the data
summary(Var2explore)
#if min is 0 or negative add a start value
Var2explore <- Var2explore+0.01 # <-- if needed change this line or comment out
#plot the variable along index values
plot(Var2explore)
identify(Var2explore)
hist(Var2explore, breaks=50)
rug(Var2explore)
qqPlot(Var2explore)
#look for possible transformations
symbox(Var2explore)
powerTransform(Var2explore)
#redo with suggested transform
trans_Var2explore <- log(Var2explore) # <-- change this line to match suggested transform
plot(trans_Var2explore)
identify(trans_Var2explore)
hist(trans_Var2explore, breaks=50)
rug(trans_Var2explore)
qqPlot(trans_Var2explore)
Var2explore = VerticalABmedSeis # <- change this to run with other response variables
#run summary of the data
summary(Var2explore)
#if min is 0 or negative add a start value
Var2explore <- Var2explore+0.01 # <-- if needed change this line or comment out
#plot the variable along index values
plot(Var2explore)
identify(Var2explore)
hist(Var2explore, breaks=50)
rug(Var2explore)
qqPlot(Var2explore)
#look for possible transformations
symbox(Var2explore)
powerTransform(Var2explore)
#redo with suggested transform
trans_Var2explore <- log(Var2explore) # <-- change this line to match suggested transform
plot(trans_Var2explore)
identify(trans_Var2explore)
Var2explore = HorzABmedSeis # <- change this to run with other response variables
#run summary of the data
summary(Var2explore)
#if min is 0 or negative add a start value
Var2explore <- Var2explore+0.01 # <-- if needed change this line or comment out
#plot the variable along index values
plot(Var2explore)
identify(Var2explore)
hist(Var2explore, breaks=50)
rug(Var2explore)
qqPlot(Var2explore)
#look for possible transformations
symbox(Var2explore)
powerTransform(Var2explore)
#redo with suggested transform
trans_Var2explore <- log(Var2explore) # <-- change this line to match suggested transform
plot(trans_Var2explore)
identify(trans_Var2explore)
hist(trans_Var2explore, breaks=50)
rug(trans_Var2explore)
qqPlot(trans_Var2explore)
influenceIndexPlot(mod1,id.n=5)
influencePlot(mod1,id.n=5)
influenceIndexPlot(mod1,id.n=3)
influencePlot(mod1,id.n=3)
influencePlot(mod2,id.n=3)
influencePlot(mod3,id.n=3)
influencePlot(mod4,id.n=3)
influencePlot(mod5,id.n=3)
influencePlot(mod6,id.n=3)
#############
#Run without #202
#run model
mod1a <- lm(NLS~LOI+LOS, subset=-c(202))
summary(mod1a)
vif(mod1a)
mod2a <- lm(ElectricActivity~LOI+LOS, subset=-c(202))
summary(mod2a)
mod3a <- lm(ltgAll~LOI+LOS, subset=-c(202))
summary(mod3a)
mod4a <- lm(ltg3plus~LOI+LOS, subset=-c(202))
summary(mod4a)
mod5a <- lm(ltgDur~LOI+LOS, subset=-c(202))
summary(mod5a)
mod6a <- lm(CRF_nls~LOI+LOS, subset=-c(202))
summary(mod6a)
influenceIndexPlot(mod1,id.n=3)
influencePlot(mod1a,id.n=3)
influencePlot(mod2a,id.n=3)
influencePlot(mod3a,id.n=3)
influencePlot(mod4a,id.n=3)
influencePlot(mod5a,id.n=3)
influencePlot(mod6a,id.n=3)
m1 <- lm(NLS~MaxVASR, data=ForRMatchedData_04032018)
summary(m1)
m2 <- lm(NLS~VASR_AB, data=ForRMatchedData_04032018)
summary(m2)
#################
m1a <- lm(NLS~log(MaxVASR), data=ForRMatchedData_04032018)
#################
LMV <- log(MaxVASR)
LMV[is.infinite(LMV) | is.nan(LMV) ] <- NA
m1a <- lm(NLS~MaxVASR, data=ForRMatchedData_04032018)
summary(m1)
#################
LMV <- log(MaxVASR)
LMV[is.infinite(LMV) | is.nan(LMV) ] <- NA
m1a <- lm(NLS~LVAB, data=ForRMatchedData_04032018)
#################
LMV <- log(MaxVASR)
LMV[is.infinite(LMV) | is.nan(LMV) ] <- NA
m1a <- lm(NLS~LVAB)
m1a <- lm(NLS~LMV)
summary(m1)
LVAB <- log(VASR_AB)
LVAB[is.infinite(LVAB) | is.nan(LVAB) ] <- NA
m2a <- lm(NLS~LVAB)
summary(m2)
summary(m1a)
summary(m1b)
m1b <- lm(NLS~LVAB)
summary(m1b)
model_used <- m1a
boxCox(model_used)
#transformed OverallMeds - Log
LOI <- log(OverallABmedInfra)
summary(x<-powerTransform(model_used))
residualPlots(model_used)
ncvTest(model_used)
spreadLevelPlot(model_used)
residualPlots(model_used)
inverseResponsePlot(model_used)
crPlots(model_used)
#################
LMV <- log(MaxVASR+0.01)
LMV[is.infinite(LMV) | is.nan(LMV) ] <- NA
m1a <- lm(NLS~LMV)
summary(m1a)
LVAB <- log(VASR_AB+0.01)
LVAB[is.infinite(LVAB) | is.nan(LVAB) ] <- NA
m1b <- lm(NLS~LVAB)
summary(m1b)
model_used <- m1a
boxCox(model_used)
summary(x<-powerTransform(model_used))
residualPlots(model_used)
ncvTest(model_used)
spreadLevelPlot(model_used)
residualPlots(model_used)
inverseResponsePlot(model_used)
crPlots(model_used)
summary(LMV)
#################
LMV <- log(MaxVASR)
summary(LMV)
#################
LMV <- log(MaxVASR)
LMV[is.infinite(LMV) | is.nan(LMV) ] <- NA
summary(LMV)
#################
LMV <- log(MaxVASR)
LMV[is.infinite(LMV) | is.nan(LMV) ] <- NA
LMV <- LMV+10
m1a <- lm(NLS~LMV)
summary(LMV)
summary(m1a)
LVAB <- log(VASR_AB+0.01)
model_used <- m1a
residualPlots(model_used)
ncvTest(model_used)
spreadLevelPlot(model_used)
inverseResponsePlot(model_used)
crPlots(model_used)
#################
LMV <- log(MaxVASR)
LMV[is.infinite(LMV) | is.nan(LMV) ] <- NA
LMV <- LMV+10
summary(LMV)
m1a <- lm(NLS~LMV)
plot(LMV,NLS)
abline(m1a)
#look only at NLS>0
NLS_g0 <- NLA[NLS>0]
#look only at NLS>0
NLS_g0 <- NLS[NLS>0]
summary(NLS_g0)
m1a <- lm(NLS_g0~LMV)
plot(LMV,NLS_g0)
LMV_g0nls <- LMV[NLS>0]
m1a <- lm(NLS_g0~LMV_g0nls)
plot(LMV_g0nls,NLS_g0)
abline(m1a)
summary(m1a)
#################
LMV <- log(MaxVASR)
LMV[is.infinite(LMV) | is.nan(LMV) ] <- NA
summary(LMV)
#look only at NLS>0
NLS_g0 <- NLS[NLS>0]
LMV_g0nls <- LMV[NLS>0]
summary(NLS_g0)
m1a <- lm(NLS_g0~LMV_g0nls)
plot(LMV_g0nls,NLS_g0)
abline(m1a)
summary(m1a)
model_used <- m1a
residualPlots(model_used)
ncvTest(model_used)
spreadLevelPlot(model_used)
inverseResponsePlot(model_used)
ncvTest(model_used)
spreadLevelPlot(model_used)
length(NLS_g0)
length(LMV_g0nls)
#check summary of the model
summary(m1a)
#run regression diagnostics on the model----
model_used <- m1a
residualPlots(model_used)
ncvTest(model_used)
spreadLevelPlot(model_used)
inverseResponsePlot(model_used)
crPlots(model_used)
# Single predictor/regressor pair
# To fold section - option-command-L
# To un-fold section - shift-option-command-L
# Replace L with O for expand or collapse all of the sections
# NLS ~ MaxVASR
# Set up the variables----
#take log of the MaxVASR variable
LMV <- log(MaxVASR)
#take all of the observations that are inf or nan and make na
LMV[is.infinite(LMV) | is.nan(LMV) ] <- NA
summary(LMV)
#look only at events where NLS>0
NLS_g0 <- NLS[NLS>0]
LMV_g0nls <- LMV[NLS>0]
summary(NLS_g0)
summary(LMV_g0nls)
length(NLS_g0)
length(LMV_g0nls)
# Make a model----
m1a <- lm(NLS_g0~LMV_g0nls)
# Plot the model with regression line----
plot(LMV_g0nls,NLS_g0)
abline(m1a)
#check summary of the model
summary(m1a)
# Run regression diagnostics on the model----
model_used <- m1a
residualPlots(model_used)
ncvTest(model_used)
spreadLevelPlot(model_used)
inverseResponsePlot(model_used)
crPlots(model_used)
# NLS ~ MaxVASR
# NLS ~ VASR_AB
# Set up the variables----
#take log of the MaxVASR variable
LVAB <- log(VASR_AB)
#take all of the observations that are inf or nan and make na
LVAB[is.infinite(LVAB) | is.nan(LVAB) ] <- NA
summary(LVAB)
#look only at events where NLS>0
NLS_g0 <- NLS[NLS>0]
LVAB_g0nls <- LVAB[NLS>0]
summary(NLS_g0)
summary(LVAB_g0nls)
length(NLS_g0)
length(LVAB_g0nls)
# Make a model----
m1b <- lm(NLS_g0~LVAB_g0nls)
source('~/Desktop/SeismicPaper_R/Model2D.R')
# NLS ~ VASR_AB
# Set up the variables----
#take log of the MaxVASR variable
LVAB <- log(VASR_AB)
#take all of the observations that are inf or nan and make na
LVAB[is.infinite(LVAB) | is.nan(LVAB) ] <- NA
summary(LVAB)
#look only at events where NLS>0
NLS_g0 <- NLS[NLS>0]
LVAB_g0nls <- LVAB[NLS>0]
summary(NLS_g0)
summary(LVAB_g0nls)
length(NLS_g0)
length(LVAB_g0nls)
# Make a model----
m1b <- lm(NLS_g0~LVAB_g0nls)
# Plot the model with regression line----
plot(LVAB_g0nls,NLS_g0)
abline(m1b)
#check summary of the model
summary(m1a)
# Run regression diagnostics on the model----
model_used <- m1b
residualPlots(model_used)
ncvTest(model_used)
spreadLevelPlot(model_used)
inverseResponsePlot(model_used)
crPlots(model_used)
# Plot the model with regression line----
plot(LVAB_g0nls,NLS_g0)
identify()
identify(LVAB_g0nls,NLS_g0)
View(LVAB_g0nls)
LVAB[26]
LVAB_g0nls[26]
test <- ForRMatchedData_04032018
View(ForRMatchedData_04032018)
attach(test)
Test_samples <- sample(SIDateTime,10)
Test_samples
View(Test_samples)
View(test)
CRFonlyDF <- sbset(test, CRF_yn == y)
CRFonlyDF <- subset(test, CRF_yn == y)
CRFonlyDF <- subset(test, CRF_yn == 'y')
View(CRFonlyDF)
#Subset out the DataFrame for only those events that have no electrical data at all
NoElectricalDF <- subset(test, NLS == 0)
length(NoElectricalDF)
View(NoElectricalDF)
